import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:starr/services/database_def.dart';
import 'package:starr/services/database_vars.dart';
import 'package:starr/services/globals.dart';

///
/// Bible Class
///
class Bible {
  late String version;
  late String name;
  late List<Book> books;

  ///
  /// Instantiate bible from map
  ///
  Bible.fromJsonMap(Map<String, dynamic> map) {
    version = map["XMLBIBLE"]["_bibleversion"];
    name = map["XMLBIBLE"]["_biblename"];
    List _bookMaps = map["XMLBIBLE"]["BIBLEBOOK"];
    List<Book> _books = [];
    _bookMaps.forEach((bookMap) {
      Book _book = Book.fromJsonMap(
        bookMap,
        bibleNameParam: name,
        bibleVersionParam: version,
      );
      _books.add(_book);
    });

    books = _books;
  }
}

///
/// Bible Book Class
///
class Book {
  late String name;
  late int number;
  late List<Chapter> chapters;

  ///
  /// Instantiate book from map
  ///
  Book.fromJsonMap(Map<String, dynamic> map,
      {required String bibleNameParam, required String bibleVersionParam}) {
    name = map["_bname"];
    number = int.parse(map["_bnumber"].toString());
    List _chapterMaps = map["CHAPTER"];
    List<Chapter> _chapters = [];
    _chapterMaps.forEach((chapterMap) {
      Chapter _chapter = Chapter.fromJsonMap(
        chapterMap,
        bookNumberParam: number,
        bookNameParam: name,
        bibleNameParam: bibleNameParam,
        bibleVersionParam: bibleVersionParam,
      );
      _chapters.add(_chapter);
    });

    chapters = _chapters;
  }
}

///
/// Bible Book Chapter Class
///
class Chapter {
  late int number;
  late List<Verse> verses;

  ///
  /// Instantiate Chapter from map
  ///
  Chapter.fromJsonMap(Map<String, dynamic> map,
      {required int bookNumberParam,
      required String bookNameParam,
      required String bibleNameParam,
      required String bibleVersionParam}) {
    number = int.parse(map["_cnumber"].toString());
    List _verseMaps = map["VERS"];
    List<Verse> _verses = [];
    _verseMaps.forEach((_verseMap) {
      Verse _verse = Verse.fromJsonMap(
        _verseMap,
        chapterNumberParam: number,
        bookNumberParam: bookNumberParam,
        bookNameParam: bookNameParam,
        bibleNameParam: bibleNameParam,
        bibleVersionParam: bibleVersionParam,
      );
      _verses.add(_verse);
    });

    verses = _verses;
  }
}

///
/// Bible Book Chapter Verse Class
///
class Verse {
  late int number;
  late String text;
  late String bookName;
  late int chapterNumber;
  late int bookNumber;
  late String bibleName;
  late String bibleVersion;
  late int isHighlighted;
  late int isBookmarked;
  late int updatedAt;

  ///
  /// Instantiate verse from database map
  ///
  Verse.fromDatabaseMap(Map<String, dynamic> map) {
    number = map[columnVerseNumber];
    text = map[columnText];
    chapterNumber = map[columnChapterNumber];
    bookNumber = map[columnBookNumber];
    bookName = map[columnBookName];
    bibleName = map[columnBibleName];
    bibleVersion = map[columnBibleVersion];
    isHighlighted = map[columnIsHighlighted];
    isBookmarked = map[columnIsBookmarked];
    updatedAt = map[columnUpdatedAt];
  }

  ///
  /// Instantiate verse from json map
  ///
  Verse.fromJsonMap(Map<String, dynamic> map,
      {required int chapterNumberParam,
      required int bookNumberParam,
      required String bookNameParam,
      required String bibleNameParam,
      required String bibleVersionParam}) {
    number = int.parse(map["_vnumber"].toString());

    if (map["__text"] == null) {
      text = "--";
    } else {
      text = map["__text"];
    }

    chapterNumber = chapterNumberParam;

    bookNumber = bookNumberParam;
    bookName = bookNameParam;

    bibleName = bibleNameParam;
    bibleVersion = bibleVersionParam;

    isHighlighted = 0;
    isBookmarked = 0;
    updatedAt = DateTime.now().millisecondsSinceEpoch;
  }

  Map<String, dynamic> toMap() {
    var map = <String, dynamic>{
      columnVerseNumber: number,
      columnText: text,
      columnChapterNumber: chapterNumber,
      columnBookName: bookName,
      columnBookNumber: bookNumber,
      columnBibleName: bibleName,
      columnBibleVersion: bibleVersion,
      columnIsHighlighted: isHighlighted,
      columnIsBookmarked: isBookmarked,
      columnUpdatedAt: updatedAt,
    };

    return map;
  }

  ///
  /// check whether book is OT
  ///
  bool isOldTestament() {
    return bookNumber <= 39;
  }

  ///
  /// check whether book is NT
  ///
  bool isNewTestament() {
    return bookNumber > 39;
  }
}

///
/// Provider Class
///
class BibleProvider with ChangeNotifier {
  late String currentVersion;
  // late Bible currentBible;

  static const CURRENT_BIBLE_STRING = "current_bible_string";

  Future<bool> getBibles() async {
    await setCurrentVersionIfNotSet();
    if (await _databaseHasBibles() == false) {
      await _populateDatabaseWithBibles();
    }
    notifyListeners();
    return true;
  }

  Future<void> setCurrentVersionIfNotSet() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    String? _currentVersion = prefs.getString(CURRENT_BIBLE_STRING);

    if (_currentVersion == null) {
      await setCurrentBible(versionsList.first);
    } else {
      await setCurrentBible(_currentVersion);
    }
  }

  Future<Bible> getBible(String version) async {
    String dataStr = await rootBundle.loadString("assets/json/$version.json");
    Map<String, dynamic> data = jsonDecode(dataStr);
    return Bible.fromJsonMap(data);
  }

  Future<void> setCurrentBible(String version) async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.setString(CURRENT_BIBLE_STRING, version);
    currentVersion = version;
    notifyListeners();
  }

  Future<bool> _databaseHasBibles() async {
    List<Map<String, dynamic>> records = await db!.query(tableBibles, limit: 1);
    return records.isNotEmpty;
  }

  Future<void> _populateDatabaseWithBibles() async {
    await Future.forEach(versionsList, (String version) async {
      Bible _bible = await getBible(version);
      await Future.forEach(_bible.books, (Book _book) async {
        await Future.forEach(_book.chapters, (Chapter _chapter) async {
          await Future.forEach(_chapter.verses, (Verse _verse) async {
            await _insertVerse(_verse);
          });
        });
      });
    });
    return;
  }

  Future<void> _insertVerse(Verse _verse) async {
    await db!.insert(tableBibles, _verse.toMap());
  }

  Future<List<Verse>> getOneVersePerBook() async {
    List<Verse> _verses = [];
    List<Map<String, Object?>> records = await db!.query(tableBibles,
        where:
            "$columnVerseNumber = ? AND $columnChapterNumber = ? AND $columnBibleVersion = ?",
        whereArgs: [1, 1, currentVersion],
        orderBy: "$columnBookNumber");
    if (records.isNotEmpty) {
      records.forEach((record) {
        _verses.add(Verse.fromDatabaseMap(record));
      });
    }
    return _verses;
  }

  Future<List<int>> getChapterNumbersForBook(int bookNumber) async {
    List<int> _chapters = [];
    List<Map<String, Object?>> records = await db!.query(tableBibles,
        where:
            "$columnBookNumber = ? AND $columnVerseNumber = ? AND $columnBibleVersion = ?",
        whereArgs: [bookNumber, 1, currentVersion],
        orderBy: "$columnBookNumber");
    if (records.isNotEmpty) {
      records.forEach((record) {
        _chapters.add(Verse.fromDatabaseMap(record).chapterNumber);
      });
    }
    return _chapters;
  }

  Future<bool> isChapterLastInBook(int chapterNumber,
      {required int bookNumber}) async {
    List<Map<String, Object?>> records = await db!.query(tableBibles,
        where:
            "$columnBookNumber = ? AND $columnChapterNumber > ? AND $columnBibleVersion = ?",
        whereArgs: [bookNumber, chapterNumber, currentVersion],
        orderBy: "$columnChapterNumber");
    return records.isEmpty;
  }

  Future<bool> isChapterFirstInBook(int chapterNumber,
      {required int bookNumber}) async {
    List<Map<String, Object?>> records = await db!.query(tableBibles,
        where:
            "$columnBookNumber = ? AND $columnChapterNumber < ? AND $columnBibleVersion = ?",
        whereArgs: [bookNumber, chapterNumber, currentVersion],
        orderBy: "$columnChapterNumber");
    return records.isEmpty;
  }

  Future<List<Verse>> getChapterVerses(int chapterNumber,
      {required int bookNumber}) async {
    List<Map<String, Object?>> records = await db!.query(tableBibles,
        where:
            "$columnBookNumber = ? AND $columnChapterNumber = ? AND $columnBibleVersion = ?",
        whereArgs: [bookNumber, chapterNumber, currentVersion],
        orderBy: "$columnChapterNumber");
    List<Verse> _verses = [];
    if (records.isNotEmpty) {
      records.forEach((record) {
        _verses.add(Verse.fromDatabaseMap(record));
      });
    }
    return _verses;
  }
}
