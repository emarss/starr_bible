import 'package:awesome_dialog/awesome_dialog.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:starr/models/bible.dart';
import 'package:starr/services/globals.dart';
import 'package:starr/services/routes.dart';
import 'package:starr/services/styles.dart';

import 'includes/dialogs.dart';

class SearchScreen extends StatefulWidget {
  @override
  SearchScreenState createState() => SearchScreenState();
}

class SearchScreenState extends State<SearchScreen> {
  final GlobalKey<FormState> _formStateKey = GlobalKey<FormState>();

  TextEditingController _searchController = TextEditingController();
  List<Verse> _results = [];
  bool _matchWholeWords = false;
  bool _matchExactPhrase = false;
  bool _searchOT = true;
  bool _searchNT = true;

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        FocusScope.of(context).requestFocus(new FocusNode());
      },
      child: Scaffold(
        appBar: AppBar(
          elevation: 0,
          toolbarHeight: 66,
          title: Text("Search", style: whiteFS20W600.merge(condensed)),
        ),
        body: ListView(padding: EdgeInsets.fromLTRB(16, 8, 16, 100), children: [
          Form(
            key: _formStateKey,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                TextFormField(
                  inputFormatters: [LengthLimitingTextInputFormatter(199)],
                  validator: (value) {
                    if (value!.isEmpty) {
                      return 'Required field';
                    }
                    if (value.length < 3) {
                      return 'Search text too short.';
                    }
                    return null;
                  },
                  controller: _searchController,
                  decoration: InputDecoration(
                      hintStyle: muteFS16W500,
                      hintText: "Type to search...",
                      border: UnderlineInputBorder()),
                ),
                SizedBox(height: 4),
                Row(mainAxisAlignment: MainAxisAlignment.end, children: [
                  ElevatedButton.icon(
                      onPressed: () {
                        if (!_formStateKey.currentState!.validate()) {
                          return;
                        }
                        _search();
                      },
                      icon: Icon(Icons.search),
                      label: Text("Search"))
                ]),
              ],
            ),
          ),
          SizedBox(height: 24),
          Text(
            "Search Options",
            style: primaryFS17W500,
          ),
          SizedBox(height: 16),
          Divider(thickness: 1.2, height: 0),
          CheckboxListTile(
            controlAffinity: ListTileControlAffinity.leading,
            value: _matchWholeWords,
            title: Row(
              children: [
                Expanded(child: Text("Match whole words", style: darkFS15W600)),
              ],
            ),
            onChanged: (bool? value) {
              setState(() {
                if (_matchWholeWords == false) {
                  _matchWholeWords = true;
                } else {
                  _matchWholeWords = false;
                }
              });
            },
          ),
          CheckboxListTile(
            controlAffinity: ListTileControlAffinity.leading,
            value: _matchExactPhrase,
            title: Row(
              children: [
                Expanded(
                    child: Text("Match Exact Phrase", style: darkFS15W600)),
              ],
            ),
            onChanged: (bool? value) {
              setState(() {
                if (_matchExactPhrase == false) {
                  _matchExactPhrase = true;
                } else {
                  _matchExactPhrase = false;
                }
              });
            },
          ),
          CheckboxListTile(
            controlAffinity: ListTileControlAffinity.leading,
            value: _searchOT,
            title: Row(
              children: [
                Expanded(
                    child: Text("Search Old Testament", style: darkFS15W600)),
              ],
            ),
            onChanged: (bool? value) {
              setState(() {
                if (_searchOT == false) {
                  _searchOT = true;
                } else {
                  _searchOT = false;
                }
              });
            },
          ),
          CheckboxListTile(
            controlAffinity: ListTileControlAffinity.leading,
            value: _searchNT,
            title: Row(
              children: [
                Expanded(
                    child: Text("Search New Testament", style: darkFS15W600)),
              ],
            ),
            onChanged: (bool? value) {
              setState(() {
                if (_searchNT == false) {
                  _searchNT = true;
                } else {
                  _searchNT = false;
                }
              });
            },
          ),
        ]),
      ),
    );
  }

  _search() async {
    FocusScope.of(context).requestFocus(new FocusNode());
    late AwesomeDialog dialog;
    dialog = await showWaitingDialogAsync(context, message: "Searching...")
      ..show();

    _results.clear();
    // RegExp _searchExp = new RegExp(
    //   "\\b(${_searchController.text.toLowerCase()})\\b",
    //   caseSensitive: false,
    // );

    if (_searchNT == false && _searchOT == false) {
      await showErrorDialogAsync(context,
          message: "No results found. Please, adjust your search options.")
        ..show();
    } else {
      // versionsList
      //     .forEach((String _version) {
      //   _bible.books
      //       .where((Book book) =>
      //           (book.isNewTestament() == _searchNT &&
      //               book.isOldTestament() != _searchNT) ||
      //           (book.isOldTestament() == _searchOT &&
      //               book.isNewTestament() != _searchOT))
      //       .forEach((Book _book) {
      //     _book.chapters.forEach((Chapter _chapter) {
      //       _chapter.verses.forEach((Verse _verse) {
      //         if (_matchFound(_verse, _searchExp)) {
      //           _results.add(ResultVerse.fromMap({
      //             "verse": _verse,
      //             "chapter": _chapter,
      //             "book": _book,
      //             "version": _version,
      //           }));
      //         }
      //       });
      //     });
      //   });
      // });
    // }
    // dialog.dismiss();

    if (_results.isEmpty) {
      await showErrorDialogAsync(context, message: "No results found.")
        ..show();
    } else {
      SearchParameters searchParameters = SearchParameters.fromMap({
        "search": _searchController.text,
        "results": _results,
        "matchWholeWords": _matchWholeWords,
        "matchExactPhrase": _matchExactPhrase,
        "searchOT": _searchOT,
        "searchNT": _searchNT,
      });
      Navigator.of(context).pushNamed(SearchResultsScreenRoute,
          arguments: {"searchParameters": searchParameters});
    }
  }

  // bool _matchFound(Verse _verse, RegExp _searchExp) {
  //   if (_matchWholeWords && _matchExactPhrase) {
  //     return _findWholeWordsExactPhrase(_searchExp, _verse);
  //   } else if (_matchWholeWords == false && _matchExactPhrase) {
  //     return _findPartialWordsExactPhrase(_verse);
  //   } else if (_matchWholeWords && _matchExactPhrase == false) {
  //     return _findWholeWordsNonExactPhrase(_verse);
  //   } else if (_matchWholeWords == false && _matchExactPhrase == false) {
  //     return _findPartialWordsNonExactPhrase(_verse);
  //   }
  //   return false;
  // }

  // bool _findWholeWordsExactPhrase(RegExp _searchExp, Verse _verse) {
  //   return _searchExp.hasMatch(_verse.text);
  // }

  // bool _findPartialWordsExactPhrase(Verse _verse) {
  //   return _verse.text
  //       .toLowerCase()
  //       .contains(_searchController.text.toLowerCase());
  // }

  // bool _findWholeWordsNonExactPhrase(Verse _verse) {
  //   return _searchController.text
  //       .toLowerCase()
  //       .trim()
  //       .split(" ")
  //       .every((String word) {
  //     RegExp _wordExp = new RegExp(
  //       "\\b(${_searchController.text.toLowerCase()})\\b",
  //       caseSensitive: false,
  //     );
  //     return _wordExp.hasMatch(_verse.text);
  //   });
  // }

  // bool _findPartialWordsNonExactPhrase(Verse _verse) {
  //   return _searchController.text
  //       .toLowerCase()
  //       .trim()
  //       .split(" ")
  //       .every((String word) {
  //     return _verse.text.toLowerCase().contains(word);
  //   });
  }
}
